/**
 * 
 */
package org.manathome.schema2doc.renderer.impl;


import org.hamcrest.core.Is;
import org.manathome.schema2doc.renderer.IRenderer;
import org.manathome.schema2doc.scanner.IDbColumn;
import org.manathome.schema2doc.scanner.IDbTable;
import org.manathome.schema2doc.util.Convert;
import org.manathome.schema2doc.util.NotNull;
import org.manathome.schema2doc.util.Require;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.PrintStream;
import java.util.Date;

/**
 * asciidoc output.
 * 
 * @author man-at-home
 *
 */
public class AsciidocRenderer implements IRenderer {

    private static final Logger LOG = LoggerFactory.getLogger(AsciidocRenderer.class);
    
    private PrintStream out = null;

    /** out stream to render to. */
	public AsciidocRenderer(@NotNull final PrintStream out) {
		LOG.debug("using asciidoc renderer..");
		this.out = Require.notNull(out, "required: out");
	}
	
	@Override
	public void renderCatalog(@NotNull String catalog) {
		out.println("== Catalog " + catalog);
	}

	@Override
	public void renderSchema(@NotNull String schema) {
		out.println("=== Schema " + schema);
	}	
	
	/* (non-Javadoc)
	 * @see org.manathome.schema2doc.renderer.IRenderer#beginRenderTable(org.manathome.schema2doc.scanner.IDbTable)
	 */
	@Override
	public void beginRenderTable(@NotNull IDbTable table) {
		out.println("[[" +  createTableFQN(table) + "]]"); // xrefable id
		
		out.println("==== Table " + 
//				 	Convert.nvl2(Require.notNull(table, "table").getCatalog(), table.getCatalog() + ".", "") +
//					Convert.nvl2(table.getSchema(), table.getSchema() + "." , "") +
					"*" + table.getName() + "*");
		
		out.println(Convert.nvl(table.getComment(), ""));
		
		// begin table columns..
		out.println("|===");
		out.println("|Column | PK | Type | Comment | Size | Constraints");
		out.println(""); // needed to get header formatting for above line.
	}

	/* (non-Javadoc)
	 * @see org.manathome.schema2doc.renderer.IRenderer#endRenderTable(org.manathome.schema2doc.scanner.IDbTable)
	 */
	@Override
	public void endRenderTable(@NotNull final IDbTable table) {
		out.println("|==="); // end columns table
		out.println();
	}

	/* (non-Javadoc)
	 * @see org.manathome.schema2doc.renderer.IRenderer#renderColumn(org.manathome.schema2doc.scanner.IDbColumn)
	 */
	@Override
	public void renderColumn(@NotNull final IDbColumn column) {
		Require.notNull(column, "column");
		out.println("| " + (column.isPrimaryKey() ? "*" + column.getName() + "*" : column.getName())); 
		out.println("| " + (column.isPrimaryKey() ? "PK " + column.getPrimaryKeyIndex() : ""));
		out.println("| " + column.getTypename()); 
		out.println("| " + Convert.nvl(column.getComment(), ""));
		out.println("| " + (column.getSize() != null ? column.getSize().toString() : ""));
		
		if (column.getForeignKeyReferences().findAny().isPresent()) {
			out.print("| ");
			column.getForeignKeyReferences().forEach(fk -> {
				out.print(column.getForeignKeyReferences().findAny().get().getName() 
						+ " to "
						+ createTableXref(
								fk.getReferencedCatalog(), 
								fk.getReferencedSchema(), 
								fk.getReferencedTable(), null));
			});				
		} else {
			out.println("| ");
		}
		out.println("");
	}
	

	@Override
	public void beginRenderDocumentation() {
		out.println("= schema2doc database documentation");
		out.println(":Date:    " + new Date());
		out.println(":numbered:"); 
		out.println(":icons:     font");
		out.println(":toc:       left");
		out.println(":toclevels: 4");
		out.println(":description: asciidoc database schema documentation generated by the schema2doc tool.");
		out.println("");
		out.println("WARNING: schema2doc is not production ready yet!");
		out.println("");
	}

	@Override
	public void endRenderDocumentation() {
		out.println("");
		out.println("document generated at " + new Date());
	}	

	@Override
	public void close() throws Exception {
		out.flush();
		out = null;
	}
	
	/** create an asciidoc xref  table link in form <<(fqnTable,displayText>>.
	 * @see http://asciidoctor.org/docs/asciidoc-writers-guide/ 
	 */
	String createTableXref(String catalog, String schema, @NotNull String table, String optionalDisplayText) {
		return "<<" + 
			   createTableFQN(catalog, schema, table) +
			   "," + 
			   Convert.nvl(optionalDisplayText, table) +
			   ">>";
	}
	
	String createTableFQN(@NotNull IDbTable table) {
		return createTableFQN(Require.notNull(table).getCatalog(), table.getSchema(), table.getName());
	}
	
	String createTableFQN(String catalog, String schema, @NotNull String table) {
		return
		   Convert.nvl2(catalog, catalog + ".", "") +
		   Convert.nvl2(schema, schema + ".", "") +
		   Require.notNull(table, "table")
		   ;
	}
}
